<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tr√¨nh chi·∫øu - <%= video.title %></title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #111;
      color: #fff;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
    }
    
    .container {
      width: 90%;
      max-width: 1200px;
      margin: 2rem auto;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    h1, h2 {
      color: #fff;
      text-align: center;
    }
    
    .slideshow-container {
      width: 100%;
      position: relative;
      margin: 2rem 0;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
    }
    
    .slide {
      display: none;
      width: 100%;
      text-align: center;
    }
    
    .slide.active {
      display: block;
    }
    
    .slide img {
      max-width: 100%;
      max-height: 70vh;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
      border: 2px solid #333;
    }
    
    .slide-timestamp {
      font-size: 1.2rem;
      margin: 1rem 0;
      color: #ccc;
    }
    
    .narrative-container {
      background-color: rgba(0, 0, 0, 0.7);
      padding: 1.5rem;
      border-radius: 8px;
      margin-top: 2rem;
      max-height: 250px;
      overflow-y: auto;
      width: 90%;
      line-height: 1.6;
    }
    
    .progress-bar {
      width: 100%;
      background-color: #333;
      height: 10px;
      margin-top: 1rem;
      border-radius: 5px;
      overflow: hidden;
    }
    
    .progress {
      height: 100%;
      background-color: #4CAF50;
      width: 0%;
      transition: width 0.5s ease;
    }
    
    .controls {
      margin-top: 1.5rem;
      display: flex;
      gap: 1rem;
    }
    
    .btn {
      padding: 0.5rem 1rem;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
      transition: background-color 0.3s;
    }
    
    .btn:hover {
      background-color: #0056b3;
    }
    
    .btn-pause {
      background-color: #f44336;
    }
    
    .btn-pause:hover {
      background-color: #d32f2f;
    }
    
    .time-display {
      margin-top: 1rem;
      font-size: 1.2rem;
      color: #ccc;
    }
    
    .back-link {
      margin-top: 2rem;
      color: #4CAF50;
      text-decoration: none;
    }
    
    .back-link:hover {
      text-decoration: underline;
    }
    
    #btn-voice {
      position: relative;
      font-size: 1.2rem;
      min-width: 40px;
    }
    
    #btn-voice:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    #btn-select-voice {
      font-size: 1.2rem;
    }
    
    #voice-selector-container {
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.7);
      min-width: 250px;
    }
    
    .narrative-container {
      width: 100%;
      height: 200px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Tr√¨nh chi·∫øu: <%= video.title %></h1>
    
    <div class="slideshow-container">
      <% 
        let descriptions;
        try {
          descriptions = JSON.parse(video.frame_descriptions);
        } catch(e) {
          descriptions = [];
        }
        
        descriptions.sort((a, b) => a.time - b.time);
        console.log('S·ªë l∆∞·ª£ng khung h√¨nh:', descriptions.length);
      %>
      
      <!-- Check slides -->
      <% if (descriptions.length === 0) { %>
        <div class="no-slides">Kh√¥ng c√≥ khung h√¨nh n√†o ƒë·ªÉ hi·ªÉn th·ªã.</div>
      <% } %>
      
      <% descriptions.forEach((frame, index) => { %>
        <div class="slide <%= index === 0 ? 'active' : '' %>" data-time="<%= frame.time %>">
          <img src="/frames/<%= videoId %>/<%= frame.time %>.jpg" 
               alt="Frame at <%= formatTime(frame.time) %>"
               onerror="this.onerror=null; console.error('L·ªói: Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh t·∫°i', this.src); this.src='/images/error.png';">
          <div class="slide-timestamp">Th·ªùi ƒëi·ªÉm: <%= formatTime(frame.time) %></div>
        </div>
      <% }); %>
      
      <div class="progress-bar">
        <div class="progress" id="progress"></div>
      </div>
      
      <div class="time-display">
        <span id="current-time">00:00</span> / 
        <span id="total-time"><%= formatTime(descriptions.length > 0 ? descriptions[descriptions.length-1].time : 0) %></span>
      </div>
      
      <div class="controls">
        <button class="btn" id="btn-restart">B·∫Øt ƒë·∫ßu l·∫°i</button>
        <button class="btn" id="btn-toggle">T·∫°m d·ª´ng</button>
        <button class="btn" id="btn-speed">x1</button>
        <button class="btn" id="btn-next">Next ‚Üí</button>
        <button class="btn" id="btn-voice" title="B·∫≠t/t·∫Øt gi·ªçng ƒë·ªçc">üîä</button>
      </div>
    </div>
    
    <div class="narrative-container">
      <div id="narrative-text">
        <%- video.narrative.replace(/\n/g, '<br>') %>
      </div>
    </div>
    
    <a href="/result/<%= videoId %>" class="back-link">‚Üê Quay l·∫°i trang k·∫øt qu·∫£</a>
  </div>
  
  <script>
    // Ki·ªÉm tra tr·∫°ng th√°i trang
    window.addEventListener('visibilitychange', function() {
      if (document.hidden) {
        console.log('Trang kh√¥ng hi·ªÉn th·ªã, t·∫°m d·ª´ng slideshow');
        stopSlideshow();
      } else {
        console.log('Trang ƒë∆∞·ª£c hi·ªÉn th·ªã l·∫°i');
      }
    });
    
    document.addEventListener('DOMContentLoaded', function() {
      const slides = document.querySelectorAll('.slide');
      const progressBar = document.getElementById('progress');
      const currentTimeDisplay = document.getElementById('current-time');
      const totalTimeDisplay = document.getElementById('total-time');
      const narrativeText = document.getElementById('narrative-text');
      const btnToggle = document.getElementById('btn-toggle');
      const btnRestart = document.getElementById('btn-restart');
      const btnSpeed = document.getElementById('btn-speed');
      const btnVoice = document.getElementById('btn-voice');
      
      // Debug: Ki·ªÉm tra c√°c ph·∫ßn t·ª≠
      console.log('Debug slideshow:');
      console.log('- slides:', slides.length);
      console.log('- progressBar:', progressBar ? 'OK' : 'Kh√¥ng t√¨m th·∫•y');
      console.log('- narrativeText:', narrativeText ? 'OK' : 'Kh√¥ng t√¨m th·∫•y');
      console.log('- Buttons:', btnToggle ? 'OK' : 'Kh√¥ng t√¨m th·∫•y');
      
      let currentSlide = 0;
      let isPlaying = true;
      let speedMultiplier = 1;
      let slideInterval;
      
      // Thi·∫øt l·∫≠p Text-to-Speech
      let isSpeaking = true;
      let currentAudio = null;
      let isAudioLoading = false;
      
      // Ki·ªÉm tra xem tr√¨nh duy·ªát c√≥ h·ªó tr·ª£ Text-to-Speech kh√¥ng
      if (!window.Audio) {
        console.error('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ audio');
        btnVoice.disabled = true;
        btnVoice.textContent = 'üîá';
        btnVoice.title = 'Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ ƒë·ªçc vƒÉn b·∫£n';
      }
      
      // S·ª≠ d·ª•ng OpenAI TTS API
      async function playTTS(text) {
        if (!text || !isSpeaking) return;
        
        // D·ª´ng audio ƒëang ph√°t
        if (currentAudio) {
          currentAudio.pause();
          currentAudio = null;
        }
        
        try {
          isAudioLoading = true;
          updateLoadingState(true);
          
          // L√†m s·∫°ch vƒÉn b·∫£n
          const cleanText = text.replace(/<br\s*\/?>/gi, ' ').replace(/<\/?[^>]+(>|$)/g, '');
          
          // L·∫•y gi·ªçng ƒë·ªçc ƒë√£ ch·ªçn
          let selectedVoice = localStorage.getItem('selectedVoice') || 'nova';
          
          // ƒê·∫£m b·∫£o gi·ªçng ƒë·ªçc l√† gi√° tr·ªã h·ª£p l·ªá
          const validVoices = ['nova', 'shimmer', 'echo', 'onyx', 'fable', 'alloy', 'ash', 'sage', 'coral'];
          if (!validVoices.includes(selectedVoice)) {
            console.warn('Gi·ªçng ƒë·ªçc kh√¥ng h·ª£p l·ªá:', selectedVoice, '- S·ª≠ d·ª•ng gi·ªçng m·∫∑c ƒë·ªãnh "nova"');
            selectedVoice = 'nova';
          }
          
          console.log('ƒêang t·∫°o gi·ªçng ƒë·ªçc cho:', cleanText.substring(0, 50) + '...', 'v·ªõi gi·ªçng:', selectedVoice);
          
          // G·ªçi API ƒë·ªÉ chuy·ªÉn ƒë·ªïi text to speech
          const response = await fetch('/api/tts', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              text: cleanText,
              voice: selectedVoice
            }),
          });
          
          if (!response.ok) {
            throw new Error('Kh√¥ng th·ªÉ t·∫°o gi·ªçng ƒë·ªçc');
          }
          
          // ƒê·ªçc response d∆∞·ªõi d·∫°ng blob
          const audioBlob = await response.blob();
          const audioUrl = URL.createObjectURL(audioBlob);
          
          // T·∫°o v√† ph√°t audio
          currentAudio = new Audio(audioUrl);
          currentAudio.playbackRate = speedMultiplier;
          
          // X·ª≠ l√Ω khi audio k·∫øt th√∫c
          currentAudio.onended = function() {
            URL.revokeObjectURL(audioUrl); // Gi·∫£i ph√≥ng b·ªô nh·ªõ
          };
          
          // Ph√°t audio
          await currentAudio.play();
          console.log('ƒêang ph√°t audio...');
        } catch (error) {
          console.error('L·ªói khi t·∫°o ho·∫∑c ph√°t gi·ªçng ƒë·ªçc:', error);
        } finally {
          isAudioLoading = false;
          updateLoadingState(false);
        }
      }
      
      // H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i loading
      function updateLoadingState(isLoading) {
        if (isLoading) {
          btnVoice.textContent = '‚è≥';
          btnVoice.title = 'ƒêang t·∫£i gi·ªçng ƒë·ªçc...';
        } else {
          btnVoice.textContent = isSpeaking ? 'üîä' : 'üîá';
          btnVoice.title = isSpeaking ? 'T·∫Øt gi·ªçng ƒë·ªçc' : 'B·∫≠t gi·ªçng ƒë·ªçc';
        }
      }
      
      // T·∫°o menu ch·ªçn gi·ªçng OpenAI
      function createVoiceSelector() {
        // N·∫øu ƒë√£ c√≥ selector, x√≥a ƒëi ƒë·ªÉ t·∫°o l·∫°i
        const existingSelector = document.getElementById('voice-selector');
        if (existingSelector) {
          existingSelector.remove();
        }
        
        // T·∫°o container cho selector
        const selectorContainer = document.createElement('div');
        selectorContainer.id = 'voice-selector-container';
        selectorContainer.style.position = 'absolute';
        selectorContainer.style.backgroundColor = '#222';
        selectorContainer.style.border = '1px solid #444';
        selectorContainer.style.borderRadius = '5px';
        selectorContainer.style.padding = '10px';
        selectorContainer.style.zIndex = '1000';
        selectorContainer.style.display = 'none';
        selectorContainer.style.maxHeight = '300px';
        selectorContainer.style.overflowY = 'auto';
        selectorContainer.style.right = '10px';
        selectorContainer.style.top = '50px';
        
        // Th√™m ti√™u ƒë·ªÅ
        const title = document.createElement('h3');
        title.textContent = 'Ch·ªçn gi·ªçng ƒë·ªçc OpenAI';
        title.style.margin = '0 0 10px 0';
        title.style.fontSize = '16px';
        selectorContainer.appendChild(title);
        
        // T·∫°o select
        const selector = document.createElement('select');
        selector.id = 'voice-selector';
        selector.style.width = '100%';
        selector.style.padding = '5px';
        selector.style.backgroundColor = '#333';
        selector.style.color = '#fff';
        selector.style.border = '1px solid #555';
        
        // Th√™m c√°c gi·ªçng OpenAI
        const openaiVoices = [
          { id: 'alloy', name: 'Alloy (Trung t√≠nh)' },
          { id: 'echo', name: 'Echo (Nam tr·∫ßm)' },
          { id: 'fable', name: 'Fable (·∫§m √°p)' },
          { id: 'onyx', name: 'Onyx (Nam uy l·ª±c)' },
          { id: 'nova', name: 'Nova (N·ªØ ·∫•m √°p)' },
          { id: 'shimmer', name: 'Shimmer (N·ªØ trong tr·∫ªo)' },
          { id: 'ash', name: 'Ash (M·ªõi)' },
          { id: 'sage', name: 'Sage (M·ªõi)' },
          { id: 'coral', name: 'Coral (M·ªõi)' }
        ];
        
        openaiVoices.forEach(voice => {
          const option = document.createElement('option');
          option.value = voice.id;
          option.textContent = voice.name;
          selector.appendChild(option);
        });
        
        selector.addEventListener('change', function() {
          const selectedIndex = this.value;
          if (selectedIndex !== '') {
            // D·ª´ng audio ƒëang ph√°t
            if (currentAudio) {
              currentAudio.pause();
              currentAudio = null;
            }
            
            // L∆∞u gi·ªçng ƒë√£ ch·ªçn v√†o localStorage
            localStorage.setItem('selectedVoice', selectedIndex);
            
            // Ph√°t th·ª≠ gi·ªçng
            playTTS('Xin ch√†o, ƒë√¢y l√† gi·ªçng ƒë·ªçc c·ªßa OpenAI.');
          }
        });
        
        selectorContainer.appendChild(selector);
        
        // N√∫t ƒë√≥ng
        const closeButton = document.createElement('button');
        closeButton.textContent = 'ƒê√≥ng';
        closeButton.style.marginTop = '10px';
        closeButton.style.padding = '5px 10px';
        closeButton.style.backgroundColor = '#555';
        closeButton.style.color = '#fff';
        closeButton.style.border = 'none';
        closeButton.style.borderRadius = '3px';
        closeButton.style.cursor = 'pointer';
        closeButton.addEventListener('click', function() {
          selectorContainer.style.display = 'none';
        });
        selectorContainer.appendChild(closeButton);
        
        // Th√™m v√†o trang
        document.querySelector('.controls').appendChild(selectorContainer);
        
        // ƒê·∫∑t gi·ªçng ƒë√£ l∆∞u (n·∫øu c√≥)
        const savedVoice = localStorage.getItem('selectedVoice');
        if (savedVoice && savedVoice < openaiVoices.length) {
          selector.value = savedVoice;
        }
      }
      
      // B·ªï sung th√™m n√∫t ch·ªçn gi·ªçng
      const btnSelectVoice = document.createElement('button');
      btnSelectVoice.id = 'btn-select-voice';
      btnSelectVoice.className = 'btn';
      btnSelectVoice.textContent = 'üó£Ô∏è';
      btnSelectVoice.title = 'Ch·ªçn gi·ªçng ƒë·ªçc';
      btnSelectVoice.addEventListener('click', function() {
        const selector = document.getElementById('voice-selector-container');
        if (selector) {
          selector.style.display = selector.style.display === 'none' ? 'block' : 'none';
        }
      });
      document.querySelector('.controls').appendChild(btnSelectVoice);
      
      // Th·ªùi gian hi·ªÉn th·ªã m·ªói slide (t√≠nh b·∫±ng ms)
      const slideTime = 10000; // 10 gi√¢y
      
      // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ slides n√†o
      if (slides.length === 0) {
        console.error('Kh√¥ng c√≥ slides n√†o ƒë∆∞·ª£c t√¨m th·∫•y!');
        return; // Tho√°t kh·ªèi script
      }
      
      // L·∫•y th·ªùi gian c·ªßa slide cu·ªëi c√πng
      const lastSlideTime = slides.length > 0 ? 
        parseInt(slides[slides.length - 1].getAttribute('data-time')) : 0;
      
      // T·∫°o c√°c th·ªùi ƒëi·ªÉm (timestamps) t·ª´ narrative
      const narrativeHTML = narrativeText ? narrativeText.innerHTML : '';
      const narrativeByTime = {};
      
      <% 
        // T√≠nh to√°n narrativeByTime trong JavaScript ph√≠a server
         const narrativeSegments = {};
         const totalParts = descriptions.length;
         
         // Ph·∫ßn n√†y s·∫Ω ƒë∆∞·ª£c t√≠nh l·∫°i ·ªü ph√≠a client sau khi c√≥ narrativeHTML
         // Server ch·ªâ t√≠nh ph·∫ßn t·ª∑ l·ªá
         descriptions.forEach((frame, index) => {
           narrativeSegments[frame.time] = {
             position: index / totalParts // V·ªã tr√≠ t∆∞∆°ng ƒë·ªëi (0-1)
           };
         });
      %>
      
      // T√≠nh to√°n v√† ph√¢n ƒëo·∫°n n·ªôi dung narrative
      console.log('- totalParts:', <%= descriptions.length %>);
      console.log('- narrativeHTML length:', narrativeHTML.length);
      
      // T√≠nh to√°n c√°c ƒëo·∫°n t·ª´ v·ªã tr√≠ t∆∞∆°ng ƒë·ªëi (c√°ch m·ªõi, tr√°nh khai b√°o l·∫°i bi·∫øn)
      (function() {
        let pos, start, end;
        <% Object.keys(narrativeSegments).forEach(time => { %>
          pos = <%= narrativeSegments[time].position %>;
          start = Math.floor(narrativeHTML.length * pos);
          end = Math.floor(narrativeHTML.length * (pos + 1/<%= totalParts %>));
          narrativeByTime[<%= time %>] = narrativeHTML.substring(start, end);
        <% }); %>
      })();
      
      // Debug: Ki·ªÉm tra narrativeByTime
      console.log('- narrativeByTime keys:', Object.keys(narrativeByTime));
      
      function showSlide(index) {
        console.log('Hi·ªÉn th·ªã slide t·∫°i index:', index);
      
        // ·∫®n t·∫•t c·∫£ slide
        slides.forEach(slide => slide.classList.remove('active'));
        
        // Hi·ªÉn th·ªã slide hi·ªán t·∫°i
        slides[index].classList.add('active');
        
        // C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
        const currentTime = parseInt(slides[index].getAttribute('data-time'));
        const progress = (currentTime / lastSlideTime) * 100;
        progressBar.style.width = `${progress}%`;
        console.log('  - currentTime:', currentTime, 'progress:', progress + '%');
        
        // C·∫≠p nh·∫≠t hi·ªÉn th·ªã th·ªùi gian
        currentTimeDisplay.textContent = formatTime(currentTime);
        
        // D·ª´ng audio ƒëang ph√°t
        if (currentAudio) {
          currentAudio.pause();
          currentAudio = null;
        }
        
        // Cu·ªôn narrative ƒë·∫øn ph·∫ßn t∆∞∆°ng ·ª©ng
        if (narrativeByTime[currentTime]) {
          const narrativeSection = narrativeByTime[currentTime];
          // T√¨m v·ªã tr√≠ c·ªßa ƒëo·∫°n n√†y trong HTML v√† cu·ªôn ƒë·∫øn ƒë√≥
          const narrativeIndex = narrativeHTML.indexOf(narrativeSection);
          if (narrativeIndex >= 0) {
            const narrativeContainer = document.querySelector('.narrative-container');
            const percentScroll = narrativeIndex / narrativeHTML.length;
            narrativeContainer.scrollTop = percentScroll * narrativeContainer.scrollHeight;
            
            // Ph√°t TTS ph·∫ßn narrative c·ªßa slide hi·ªán t·∫°i
            if (isSpeaking) {
              playTTS(narrativeSection);
            }
          }
        }
      }
      
      function nextSlide() {
        if (currentSlide < slides.length - 1) {
          currentSlide++;
          showSlide(currentSlide);
        } else {
          stopSlideshow();
        }
      }
      
      function startSlideshow() {
        console.log('startSlideshow called, isPlaying =', isPlaying);
        if (isPlaying) {
          showSlide(currentSlide);
          // H·ªßy b·ªè b·ªô h·∫πn gi·ªù c≈© n·∫øu c√≥
          if (slideInterval) {
            clearTimeout(slideInterval);
          }
          
          // Thi·∫øt l·∫≠p b·ªô h·∫πn gi·ªù m·ªõi
          console.log('ƒê·∫∑t h·∫πn gi·ªù, nextSlide sau', slideTime / speedMultiplier, 'ms');
          slideInterval = setTimeout(() => {
            nextSlide();
            // Ch·ªâ t·ª± ƒë·ªông ti·∫øp t·ª•c n·∫øu v·∫´n ƒëang ·ªü ch·∫ø ƒë·ªô ph√°t
            if (isPlaying) {
              startSlideshow();
            }
          }, slideTime / speedMultiplier);
        }
      }
      
      function stopSlideshow() {
        if (slideInterval) {
          clearTimeout(slideInterval);
          slideInterval = null;
        }
        isPlaying = false;
        btnToggle.textContent = "Ti·∫øp t·ª•c";
        btnToggle.classList.remove('btn-pause');
      }
      
      function toggleSlideshow() {
        if (isPlaying) {
          stopSlideshow();
        } else {
          isPlaying = true;
          btnToggle.textContent = "T·∫°m d·ª´ng";
          btnToggle.classList.add('btn-pause');
          startSlideshow();
        }
        // Ph∆∞∆°ng ph√°p d·ª± ph√≤ng - click v√†o n√∫t ƒë·ªÉ test chuy·ªÉn slide m·ªôt c√°ch th·ªß c√¥ng
        console.log('ƒêang ·ªü slide:', currentSlide, '/', slides.length - 1);
      }
      
      function restartSlideshow() {
        currentSlide = 0;
        isPlaying = true;
        btnToggle.textContent = "T·∫°m d·ª´ng";
        btnToggle.classList.add('btn-pause');
        startSlideshow();
      }
      
      function changeSpeed() {
        const speeds = [1, 1.5, 2, 3];
        const currentSpeedIndex = speeds.indexOf(speedMultiplier);
        speedMultiplier = speeds[(currentSpeedIndex + 1) % speeds.length];
        btnSpeed.textContent = `x${speedMultiplier}`;
        
        // C·∫≠p nh·∫≠t t·ªëc ƒë·ªô c·ªßa audio ƒëang ph√°t
        if (currentAudio) {
          currentAudio.playbackRate = speedMultiplier;
        }
        
        if (isPlaying) {
          startSlideshow(); // Restart v·ªõi t·ªëc ƒë·ªô m·ªõi
        }
      }
      
      // B·∫≠t/t·∫Øt gi·ªçng ƒë·ªçc
      function toggleVoice() {
        if (isAudioLoading) return;
        
        isSpeaking = !isSpeaking;
        btnVoice.textContent = isSpeaking ? 'üîä' : 'üîá';
        
        if (!isSpeaking) {
          // D·ª´ng audio n·∫øu ƒëang ph√°t
          if (currentAudio) {
            currentAudio.pause();
            currentAudio = null;
          }
        } else {
          // B·∫Øt ƒë·∫ßu ph√°t audio l·∫°i n·∫øu ƒëang hi·ªÉn th·ªã slide
          const currentTime = parseInt(slides[currentSlide].getAttribute('data-time'));
          if (narrativeByTime[currentTime]) {
            playTTS(narrativeByTime[currentTime]);
          }
        }
      }
      
      // Format th·ªùi gian t·ª´ gi√¢y sang MM:SS
      function formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs.toString().padStart(2, '0')}`;
      }
      
      // G·∫Øn s·ª± ki·ªán cho c√°c n√∫t
      btnToggle.addEventListener('click', toggleSlideshow);
      btnRestart.addEventListener('click', restartSlideshow);
      btnSpeed.addEventListener('click', changeSpeed);
      document.getElementById('btn-next').addEventListener('click', nextSlide);
      btnVoice.addEventListener('click', toggleVoice);
      
      // B·∫Øt ƒë·∫ßu tr√¨nh chi·∫øu
      btnToggle.classList.add('btn-pause');
      console.log('Slides c√≥ s·∫µn:', slides.length);
      
      // Kh·ªüi t·∫°o tr√¨nh ch·ªçn gi·ªçng ƒë·ªçc
      createVoiceSelector();
      
      startSlideshow();
      console.log('ƒê√£ b·∫Øt ƒë·∫ßu tr√¨nh chi·∫øu');
    });
  </script>
</body>
</html> 