<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tr√¨nh chi·∫øu - <%= video.title %></title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #111;
      color: #fff;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
    }
    
    .container {
      width: 90%;
      max-width: 1200px;
      margin: 2rem auto;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    h1, h2 {
      color: #fff;
      text-align: center;
    }
    
    .slideshow-container {
      width: 100%;
      position: relative;
      margin: 2rem 0;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
    }
    
    .slide {
      display: none;
      width: 100%;
      text-align: center;
    }
    
    .slide.active {
      display: block;
    }
    
    .slide img {
      max-width: 100%;
      max-height: 70vh;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
      border: 2px solid #333;
    }
    
    .slide-timestamp {
      font-size: 1.2rem;
      margin: 1rem 0;
      color: #ccc;
    }
    
    .narrative-container {
      background-color: rgba(0, 0, 0, 0.7);
      padding: 1.5rem;
      border-radius: 8px;
      margin-top: 2rem;
      max-height: 250px;
      overflow-y: auto;
      width: 90%;
      line-height: 1.6;
    }
    
    .progress-bar {
      width: 100%;
      background-color: #333;
      height: 10px;
      margin-top: 1rem;
      border-radius: 5px;
      overflow: hidden;
    }
    
    .progress {
      height: 100%;
      background-color: #4CAF50;
      width: 0%;
      transition: width 0.5s ease;
    }
    
    .controls {
      margin-top: 1.5rem;
      display: flex;
      gap: 1rem;
    }
    
    .btn {
      padding: 0.5rem 1rem;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
      transition: background-color 0.3s;
    }
    
    .btn:hover {
      background-color: #0056b3;
    }
    
    .btn-pause {
      background-color: #f44336;
    }
    
    .btn-pause:hover {
      background-color: #d32f2f;
    }
    
    .time-display {
      margin-top: 1rem;
      font-size: 1.2rem;
      color: #ccc;
    }
    
    .back-link {
      margin-top: 2rem;
      color: #4CAF50;
      text-decoration: none;
    }
    
    .back-link:hover {
      text-decoration: underline;
    }
    
    #btn-voice {
      position: relative;
      font-size: 1.2rem;
      min-width: 40px;
    }
    
    #btn-voice:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    #btn-select-voice {
      font-size: 1.2rem;
    }
    
    #voice-selector-container {
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.7);
      min-width: 250px;
    }
    
    .narrative-container {
      width: 100%;
      height: 200px;
    }
    
    /* CSS cho modal kh·ªüi ƒë·ªông */
    .start-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.9);
      z-index: 1000;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }
    
    .start-overlay h2 {
      font-size: 24px;
      margin-bottom: 20px;
    }
    
    .start-button {
      padding: 15px 30px;
      font-size: 18px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    
    .start-button:hover {
      background-color: #45a049;
    }
    
    .hidden {
      display: none !important;
    }
  </style>
</head>
<body>
  <!-- Modal kh·ªüi ƒë·ªông -->
  <div class="start-overlay" id="startOverlay">
    <h2>S·∫µn s√†ng b·∫Øt ƒë·∫ßu tr√¨nh chi·∫øu?</h2>
    <button class="start-button" id="btnStartPresentation">B·∫Øt ƒë·∫ßu xem</button>
  </div>
  
  <div class="container">
    <h1><%= video.title %></h1
    
    <div class="slideshow-container">
      <% 
        let descriptions;
        try {
          descriptions = JSON.parse(video.frame_descriptions);
        } catch(e) {
          descriptions = [];
        }
        
        descriptions.sort((a, b) => a.time - b.time);
        console.log('S·ªë l∆∞·ª£ng khung h√¨nh:', descriptions.length);
      %>
      
      <!-- Check slides -->
      <% if (descriptions.length === 0) { %>
        <div class="no-slides">Kh√¥ng c√≥ khung h√¨nh n√†o ƒë·ªÉ hi·ªÉn th·ªã.</div>
      <% } %>
      
      <% descriptions.forEach((frame, index) => { %>
        <div class="slide <%= index === 0 ? 'active' : '' %>" data-time="<%= frame.time %>">
          <img src="/frames/<%= videoId %>/<%= frame.time %>.jpg" 
               alt="Frame at <%= formatTime(frame.time) %>"
               onerror="this.onerror=null; console.error('L·ªói: Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh t·∫°i', this.src); this.src='/images/error.png';">
          <div class="slide-timestamp">Th·ªùi ƒëi·ªÉm: <%= formatTime(frame.time) %></div>
        </div>
      <% }); %>
      
      <div class="progress-bar">
        <div class="progress" id="progress"></div>
      </div>
      
      <div class="time-display">
        <span id="current-time">00:00</span> / 
        <span id="total-time"><%= formatTime(descriptions.length > 0 ? descriptions[descriptions.length-1].time : 0) %></span>
      </div>
      
      <div class="controls">
        <button class="btn" id="btn-restart">B·∫Øt ƒë·∫ßu l·∫°i</button>
        <button class="btn" id="btn-toggle">T·∫°m d·ª´ng</button>
        <button class="btn" id="btn-speed">x1</button>
        <button class="btn" id="btn-next">Next ‚Üí</button>
        <button class="btn" id="btn-voice" title="B·∫≠t/t·∫Øt gi·ªçng ƒë·ªçc">üîä</button>
      </div>
    </div>
    
    <div class="narrative-container">
      <div id="narrative-text">
        <%- video.narrative.replace(/\n/g, '<br>') %>
      </div>
    </div>
    
    <a href="/result/<%= videoId %>" class="back-link">‚Üê Quay l·∫°i trang k·∫øt qu·∫£</a>
  </div>
  
  <script>
    // Ki·ªÉm tra tr·∫°ng th√°i trang
    window.addEventListener('visibilitychange', function() {
      if (document.hidden) {
        console.log('Trang kh√¥ng hi·ªÉn th·ªã, t·∫°m d·ª´ng slideshow');
        stopSlideshow();
      } else {
        console.log('Trang ƒë∆∞·ª£c hi·ªÉn th·ªã l·∫°i');
      }
    });
    
    document.addEventListener('DOMContentLoaded', function() {
      let userInteracted = false;
      const slides = document.querySelectorAll('.slide');
      const progressBar = document.querySelector('.progress');
      const currentTimeDisplay = document.getElementById('current-time');
      const totalTimeDisplay = document.getElementById('total-time');
      const narrativeText = document.getElementById('narrative-text');
      const btnToggle = document.getElementById('btn-toggle');
      const btnRestart = document.getElementById('btn-restart');
      const btnSpeed = document.getElementById('btn-speed');
      const btnVoice = document.getElementById('btn-voice');
      
      // Kh·ªüi t·∫°o nh·∫°c n·ªÅn
      const backgroundMusic = new Audio('/background/background.mp3');
      backgroundMusic.loop = true; // L·∫∑p l·∫°i li√™n t·ª•c
      backgroundMusic.volume = 0.2; // √Çm l∆∞·ª£ng nh·ªè (20%)
      
      // L·∫•y th·ªùi gian c·ªßa slide cu·ªëi c√πng
      const lastSlideTime = slides.length > 0 ? 
        parseInt(slides[slides.length - 1].getAttribute('data-time')) : 0;
      
      // Hi·ªÉn th·ªã t·ªïng th·ªùi l∆∞·ª£ng
      if (totalTimeDisplay) {
        totalTimeDisplay.textContent = formatTime(lastSlideTime);
      }
      
      // Debug: Ki·ªÉm tra c√°c ph·∫ßn t·ª≠
      console.log('Debug slideshow:');
      console.log('- slides:', slides.length);
      console.log('- progressBar:', progressBar ? 'OK' : 'Kh√¥ng t√¨m th·∫•y');
      console.log('- narrativeText:', narrativeText ? 'OK' : 'Kh√¥ng t√¨m th·∫•y');
      console.log('- Buttons:', btnToggle ? 'OK' : 'Kh√¥ng t√¨m th·∫•y');
      
      let currentSlide = 0;
      let isPlaying = true;
      let speedMultiplier = 1;
      let slideInterval = null;
      const defaultInterval = 10000; // 10 gi√¢y m·ªói slide
      
      // Thi·∫øt l·∫≠p Audio Player
      let isSpeaking = true;
      const audioElements = {}; // L∆∞u tr·ªØ c√°c ph·∫ßn t·ª≠ audio theo th·ªùi gian
      
      // Pre-load t·∫•t c·∫£ c√°c file audio cho m·ªói slide
      function preloadAudios() {
        console.log('Preloading audio files...');
        const videoId = '<%= videoId %>';
        
        // Ki·ªÉm tra xem Web Speech API c√≥ kh·∫£ d·ª•ng kh√¥ng
        const speechSynthesisAvailable = 'speechSynthesis' in window;
        if (speechSynthesisAvailable) {
          console.log('Web Speech API kh·∫£ d·ª•ng - s·∫Ω d√πng l√†m ph∆∞∆°ng √°n d·ª± ph√≤ng');
        }
        
        // Ki·ªÉm tra xem th∆∞ m·ª•c audio c√≥ t·ªìn t·∫°i v√† c√≥ file kh√¥ng
        const apiUrl = `/api/audio/${videoId}/list`;
        console.log('G·ªçi API v·ªõi URL:', apiUrl);
        fetch(apiUrl)
          .then(response => {
            console.log('API response status:', response.status);
            if (!response.ok) {
              throw new Error(`Server tr·∫£ v·ªÅ l·ªói ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            console.log('Danh s√°ch file audio c√≥ s·∫µn:', data);
            
            // Th√¥ng b√°o n·∫øu th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ file
            if (!data.exists || data.files.length === 0) {
              console.warn('Kh√¥ng t√¨m th·∫•y file audio n√†o trong th∆∞ m·ª•c');
            }
          })
          .catch(err => {
            console.error('Kh√¥ng th·ªÉ l·∫•y danh s√°ch audio:', err);
            console.log('H·ªá th·ªëng s·∫Ω s·ª≠ d·ª•ng Speech Synthesis API thay th·∫ø');
          });
        
        slides.forEach(slide => {
          const timePoint = slide.getAttribute('data-time');
          
          // ƒê·∫£m b·∫£o timePoint l√† s·ªë nguy√™n
          const timeAsInt = parseInt(timePoint);
          if (isNaN(timeAsInt)) {
            console.error(`Th·ªùi ƒëi·ªÉm kh√¥ng h·ª£p l·ªá: ${timePoint}`);
          }
          
          const audioUrl = `/audio/${videoId}/${timePoint}.mp3`;
          console.log(`T·∫£i audio t·ª´: ${audioUrl}`);
          
          const audio = new Audio(`/audio/${videoId}/${timePoint}.mp3`);
          audio.preload = 'auto';
          audioElements[timePoint] = audio;
          
          // X·ª≠ l√Ω l·ªói n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c audio
          audio.onerror = function() {
            console.warn(`Kh√¥ng th·ªÉ t·∫£i audio cho th·ªùi ƒëi·ªÉm ${timePoint}s - s·∫Ω d√πng speech synthesis`);
            audioElements[timePoint].error = true;
          };
        });
      }
      
      // Ph√°t audio cho slide hi·ªán t·∫°i
      function playCurrentAudio() {
        if (!isSpeaking || !userInteracted) return;
        
        const currentTime = parseInt(slides[currentSlide].getAttribute('data-time'));
        const audio = audioElements[currentTime];
        
        // N·∫øu audio kh√¥ng c√≥ s·∫µn ho·∫∑c b·ªã l·ªói, s·ª≠ d·ª•ng Speech Synthesis API
        if (!audio || audio.error) {
          console.log(`S·ª≠ d·ª•ng Speech Synthesis cho slide ${currentTime}s`);
          
          // T√¨m ƒëo·∫°n text t∆∞∆°ng ·ª©ng
          if (narrativeByTime[currentTime]) {
            // S·ª≠ d·ª•ng Speech Synthesis API thay th·∫ø
            if ('speechSynthesis' in window) {
              // D·ª´ng b·∫•t k·ª≥ ph√°t √¢m n√†o ƒëang di·ªÖn ra
              window.speechSynthesis.cancel();
              
              // T·∫°o v√† c·∫•u h√¨nh utterance m·ªõi
              const utterance = new SpeechSynthesisUtterance(narrativeByTime[currentTime]);
              utterance.lang = 'vi-VN';
              utterance.rate = speedMultiplier;
              
              // Th√™m x·ª≠ l√Ω s·ª± ki·ªán k·∫øt th√∫c n·∫øu c·∫ßn
              utterance.onend = function() {
                console.log(`ƒê√£ ho√†n th√†nh ph√°t √¢m cho slide ${currentTime}s`);
              };
              
              window.speechSynthesis.speak(utterance);
            }
          }
          return;
        }
        
        if (audio) {
          // D·ª´ng t·∫•t c·∫£ c√°c audio ƒëang ph√°t
          stopAllAudio();
          
          // Thi·∫øt l·∫≠p t·ªëc ƒë·ªô ph√°t
          audio.playbackRate = speedMultiplier;
          
          // Ph√°t audio
          audio.play().catch(err => {
            console.error('L·ªói khi ph√°t audio:', err);
          });
          
          console.log(`ƒêang ph√°t audio cho th·ªùi ƒëi·ªÉm ${currentTime}s v·ªõi t·ªëc ƒë·ªô x${speedMultiplier}`);
        } else {
          console.warn(`Kh√¥ng c√≥ audio cho th·ªùi ƒëi·ªÉm ${currentTime}s`);
        }
      }
      
      // D·ª´ng t·∫•t c·∫£ audio ƒëang ph√°t
      function stopAllAudio() {
        Object.values(audioElements).forEach(audio => {
          if (!audio.paused) {
            audio.pause();
            audio.currentTime = 0;
          }
        });
        
        // D·ª´ng c·∫£ Speech Synthesis n·∫øu ƒëang ph√°t
        if ('speechSynthesis' in window) {
          window.speechSynthesis.cancel();
        }
      }
      
      // T·∫£i narrative t·ª´ data
      const narrativeHTML = `<%- video.narrative.replace(/\n/g, '<br>').replace(/'/g, "\\'") %>`;
      
      // T√≠nh to√°n narrativeByTime trong JavaScript ph√≠a client
      const narrativeByTime = {};
      
      <% 
        // T√≠nh to√°n narrativeByTime trong JavaScript ph√≠a server
         const narrativeSegments = {};
         const totalParts = descriptions.length;
         
         // Ph·∫ßn n√†y s·∫Ω ƒë∆∞·ª£c t√≠nh l·∫°i ·ªü ph√≠a client sau khi c√≥ narrativeHTML
         // Server ch·ªâ t√≠nh ph·∫ßn t·ª∑ l·ªá
         descriptions.forEach((frame, index) => {
           narrativeSegments[frame.time] = {
             position: index / totalParts // V·ªã tr√≠ t∆∞∆°ng ƒë·ªëi (0-1)
           };
         });
      %>
      
      // T√≠nh to√°n v√† ph√¢n ƒëo·∫°n n·ªôi dung narrative
      console.log('- totalParts:', <%= descriptions.length %>);
      console.log('- narrativeHTML length:', narrativeHTML.length);
      
      // T√≠nh to√°n c√°c ƒëo·∫°n t·ª´ v·ªã tr√≠ t∆∞∆°ng ƒë·ªëi (c√°ch m·ªõi, tr√°nh khai b√°o l·∫°i bi·∫øn)
      (function() {
        let pos, start, end;
        <% Object.keys(narrativeSegments).forEach(time => { %>
          pos = <%= narrativeSegments[time].position %>;
          start = Math.floor(narrativeHTML.length * pos);
          end = Math.floor(narrativeHTML.length * (pos + 1/<%= totalParts %>));
          narrativeByTime[<%= time %>] = narrativeHTML.substring(start, end);
        <% }); %>
      })();
      
      // Debug: Ki·ªÉm tra narrativeByTime
      console.log('- narrativeByTime keys:', Object.keys(narrativeByTime));
      
      function showSlide(index) {
        console.log('Hi·ªÉn th·ªã slide t·∫°i index:', index);
      
        // ·∫®n t·∫•t c·∫£ slide
        slides.forEach(slide => slide.classList.remove('active'));
        
        // Hi·ªÉn th·ªã slide hi·ªán t·∫°i
        slides[index].classList.add('active');
        
        // C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
        const currentTime = parseInt(slides[index].getAttribute('data-time'));
        const progress = (currentTime / lastSlideTime) * 100;
        progressBar.style.width = `${progress}%`;
        console.log('  - currentTime:', currentTime, 'progress:', progress + '%');
        
        // C·∫≠p nh·∫≠t hi·ªÉn th·ªã th·ªùi gian
        currentTimeDisplay.textContent = formatTime(currentTime);
        
        // D·ª´ng audio ƒëang ph√°t
        stopAllAudio();
        
        // Cu·ªôn narrative ƒë·∫øn ph·∫ßn t∆∞∆°ng ·ª©ng
        if (narrativeByTime[currentTime]) {
          const narrativeSection = narrativeByTime[currentTime];
          // T√¨m v·ªã tr√≠ c·ªßa ƒëo·∫°n n√†y trong HTML v√† cu·ªôn ƒë·∫øn ƒë√≥
          const narrativeIndex = narrativeHTML.indexOf(narrativeSection);
          if (narrativeIndex >= 0) {
            const narrativeContainer = document.querySelector('.narrative-container');
            const percentScroll = narrativeIndex / narrativeHTML.length;
            narrativeContainer.scrollTop = percentScroll * narrativeContainer.scrollHeight;
            
            // Ph√°t audio cho slide hi·ªán t·∫°i
            if (isSpeaking) {
              playCurrentAudio();
            }
          }
        }
      }
      
      function nextSlide() {
        if (currentSlide < slides.length - 1) {
          currentSlide++;
          showSlide(currentSlide);
        } else {
          stopSlideshow();
        }
      }
      
      function startSlideshow() {
        console.log('startSlideshow called, isPlaying =', isPlaying);
        if (isPlaying) {
          showSlide(currentSlide);
          // H·ªßy b·ªè b·ªô h·∫πn gi·ªù c≈© n·∫øu c√≥
          if (slideInterval) {
            clearTimeout(slideInterval);
          }
          
          // Thi·∫øt l·∫≠p b·ªô h·∫πn gi·ªù m·ªõi
          console.log('ƒê·∫∑t h·∫πn gi·ªù, nextSlide sau', defaultInterval / speedMultiplier, 'ms');
          slideInterval = setTimeout(() => {
            nextSlide();
            // Ch·ªâ t·ª± ƒë·ªông ti·∫øp t·ª•c n·∫øu v·∫´n ƒëang ·ªü ch·∫ø ƒë·ªô ph√°t
            if (isPlaying) {
              startSlideshow();
            }
          }, defaultInterval / speedMultiplier);
        }
      }
      
      function stopSlideshow() {
        if (slideInterval) {
          clearTimeout(slideInterval);
          slideInterval = null;
        }
        isPlaying = false;
        btnToggle.textContent = "Ti·∫øp t·ª•c";
        btnToggle.classList.remove('btn-pause');
        
        // Ch·ªâ t·∫°m d·ª´ng nh·∫°c n·ªÅn khi d·ª´ng slideshow, kh√¥ng d·ª´ng h·∫≥n
        if (!backgroundMusic.paused) {
          backgroundMusic.pause();
        }
      }
      
      function toggleSlideshow() {
        if (isPlaying) {
          stopSlideshow();
        } else {
          isPlaying = true;
          btnToggle.textContent = "T·∫°m d·ª´ng";
          btnToggle.classList.add('btn-pause');
          
          // Ti·∫øp t·ª•c ph√°t nh·∫°c n·ªÅn n·∫øu ƒë√£ t·∫°m d·ª´ng
          if (backgroundMusic.paused && userInteracted) {
            backgroundMusic.play().catch(err => console.error('Kh√¥ng th·ªÉ ti·∫øp t·ª•c nh·∫°c n·ªÅn:', err));
          }
          
          startSlideshow();
        }
        // Ph∆∞∆°ng ph√°p d·ª± ph√≤ng - click v√†o n√∫t ƒë·ªÉ test chuy·ªÉn slide m·ªôt c√°ch th·ªß c√¥ng
        console.log('ƒêang ·ªü slide:', currentSlide, '/', slides.length - 1);
      }
      
      function restartSlideshow() {
        currentSlide = 0;
        isPlaying = true;
        btnToggle.textContent = "T·∫°m d·ª´ng";
        btnToggle.classList.add('btn-pause');
        startSlideshow();
      }
      
      function changeSpeed() {
        const speeds = [1, 1.5, 2, 3];
        const currentSpeedIndex = speeds.indexOf(speedMultiplier);
        speedMultiplier = speeds[(currentSpeedIndex + 1) % speeds.length];
        btnSpeed.textContent = `x${speedMultiplier}`;
        
        // C·∫≠p nh·∫≠t t·ªëc ƒë·ªô c·ªßa audio ƒëang ph√°t
        Object.values(audioElements).forEach(audio => {
          if (!audio.paused) {
            audio.playbackRate = speedMultiplier;
          }
        });
        
        if (isPlaying) {
          startSlideshow(); // Restart v·ªõi t·ªëc ƒë·ªô m·ªõi
        }
      }
      
      // B·∫≠t/t·∫Øt gi·ªçng ƒë·ªçc
      function toggleVoice() {
        isSpeaking = !isSpeaking;
        btnVoice.textContent = isSpeaking ? 'üîä' : 'üîá';
        
        if (!isSpeaking) {
          // D·ª´ng t·∫•t c·∫£ audio
          stopAllAudio();
        } else {
          // Ph√°t audio cho slide hi·ªán t·∫°i
          playCurrentAudio();
        }
      }
      
      // Format th·ªùi gian t·ª´ gi√¢y sang MM:SS
      function formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs.toString().padStart(2, '0')}`;
      }
      
      // G·∫Øn s·ª± ki·ªán cho c√°c n√∫t
      btnToggle.addEventListener('click', toggleSlideshow);
      btnRestart.addEventListener('click', restartSlideshow);
      btnSpeed.addEventListener('click', changeSpeed);
      document.getElementById('btn-next').addEventListener('click', nextSlide);
      btnVoice.addEventListener('click', toggleVoice);
      
      // T·∫£i tr∆∞·ªõc c√°c file audio nh∆∞ng ch∆∞a b·∫Øt ƒë·∫ßu tr√¨nh chi·∫øu
      preloadAudios();
      console.log('Slides c√≥ s·∫µn:', slides.length);
      
      // X·ª≠ l√Ω n√∫t b·∫Øt ƒë·∫ßu
      document.getElementById('btnStartPresentation').addEventListener('click', function() {
        // ·∫®n overlay
        document.getElementById('startOverlay').classList.add('hidden');
        
        // ƒê√°nh d·∫•u ng∆∞·ªùi d√πng ƒë√£ t∆∞∆°ng t√°c
        userInteracted = true;
        
        // Ph√°t nh·∫°c n·ªÅn
        try {
          backgroundMusic.play()
            .catch(err => console.error('Kh√¥ng th·ªÉ ph√°t nh·∫°c n·ªÅn:', err));
        } catch (err) {
          console.error('L·ªói khi ph√°t nh·∫°c n·ªÅn:', err);
        }
        
        // Ki·ªÉm tra xem c√≥ audio n√†o ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng kh√¥ng
        const anyAudioLoaded = Object.values(audioElements).some(audio => !audio.error);
        if (!anyAudioLoaded) {
          console.log('Kh√¥ng c√≥ audio n√†o ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng - s·ª≠ d·ª•ng Speech Synthesis API');
          alert('Kh√¥ng th·ªÉ t·∫£i file audio. H·ªá th·ªëng s·∫Ω s·ª≠ d·ª•ng gi·ªçng ƒë·ªçc t·ª´ tr√¨nh duy·ªát thay th·∫ø.');
        }
        
        // B·∫Øt ƒë·∫ßu tr√¨nh chi·∫øu
        btnToggle.classList.add('btn-pause');
        startSlideshow();
        console.log('ƒê√£ b·∫Øt ƒë·∫ßu tr√¨nh chi·∫øu sau khi ng∆∞·ªùi d√πng t∆∞∆°ng t√°c');
      });
    });
  </script>
</body>
</html> 